# Test your FastAPI endpoints in local env

1. 아나콘다를 다운 받는다.

2. 아나콘다 환경을 생성한다
    - 생성 코드: conda create -n lang python=3.11

3. 가상환경으로 이동한다.
    - conda activate lang

4. 라이브러리를 다운받는다
    - 코드: pip install -r requierments.txt

5. 환경 실행 - 로컬에서 테스트
    - uvicorn main:app --reload

6. 나는 postman에서 테스트

## 대화 시작하는 방법
Post http://127.0.0.1:8000/api/conversation/start

### body에 담아야 하는거
{
    "text":"" // 비어두면 됨
    "senior_id":"1" 
}

### 반환 되는 값
{
    "text" : "안녕하세요! 오늘 하루는 어떠신가요?"
    "conversation_id": "숫자"
}

## 대화 진행하는 방법
Post http://127.0.0.1:8000/api/conversation/chat?conversation_id=받은 숫자

### body에 담아야하는것
{
    "text":"사용자가 한 대답"
    "senior_id":"1"
}

### 반환값 in kafka
{
	"response_text": "날씨가 좋지 않으면 기분도 가라앉고 피로감이 더 느껴질 수 있죠. 요즘 많이 바쁘셨나요? 휴식도 충분히 취하셨으면 좋겠어요. 평소에 어떻게 피로를 푸시나요?",
	"senior_id": 1,
	"conversation_id": "14",
	"timestamp": "2024-11-14T16:18:12.968719"
}

### 받을때 예시

from kafka import KafkaConsumer
import json
from datetime import datetime

def create_consumer():
    # Kafka 컨슈머 설정
    consumer = KafkaConsumer(
        'elderly_conversations',                      # 구독할 토픽 이름 -> 유병주가 올려 놓은 토픽이름
        bootstrap_servers=['http://k11a202.p.ssafy.io:9092'],         # Kafka 브로커 주소
        auto_offset_reset='earliest',                # 처음부터 메시지를 읽기 위해 'earliest' 설정
        enable_auto_commit=True,                     # 자동 커밋 활성화
        group_id='elderly_conversation_group',       # 컨슈머 그룹 ID
        value_deserializer=lambda x: json.loads(x.decode('utf-8'))  # JSON 디코딩
    )
    return consumer

def process_message(message):
    """메시지 처리 로직"""
    response_text = message['response_text']
    senior_id = message['senior_id']
    conversation_id = message['conversation_id']
    timestamp = datetime.fromisoformat(message['timestamp'])
    
    print(f"새로운 대화 메시지 수신:")
    print(f"시니어 ID: {senior_id}")
    print(f"대화 ID: {conversation_id}")
    print(f"응답 텍스트: {response_text}")
    print(f"타임스탬프: {timestamp}")
    print("-" * 50)

def main():
    consumer = create_consumer()
    print("메시지 수신 대기 중...")
    
    try:
        for message in consumer:
            process_message(message.value)
    except KeyboardInterrupt:
        print("컨슈머를 종료합니다.")
    finally:
        consumer.close()

if __name__ == "__main__":
    main()


### 데이터 분석 값은 사용하지 않아서 상관 안쓰셔도 됩니당 스피커에서는

### 앱에서 사용될 DB 조회 
### DB에 저장되는 값 평균은 무조건  Conversation 에 저장되며 대화가 10회로 끝났을때만 평균이 적용된다.
### Memory 에 저장되는 값에서 긍정도는 positivity_score로 저장된다.